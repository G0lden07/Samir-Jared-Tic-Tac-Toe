@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div style="color:red; text-align:center; font-weight:bold; margin-bottom:10px;">
        @errorMessage
    </div>
}

<h1 style="text-align:center;">Welcome!</h1>
<p style="text-align:center;">Click on one of the grid cells below to start a game!</p>

<br />

<!-- Game Grid -->
<div id="gameTiles" style='@($"display: grid; gap: 5px; justify-content: center; grid-template-columns: repeat(3, {CellSize}px);")'>
    @for (int i = 0; i < 9; i++)
    {
        int index = i;

        <FluentButton Appearance="Appearance.Outline" style='@($"width: {CellSize}px; height: {CellSize}px;")' @onclick="() => PlayerMove(index)">
            @DisplayCell(board[index])
        </FluentButton>
    }
</div>

<!-- Status Message and Reset Button -->
<div style="text-align:center; margin:20px 0;">
    <p style="@messageStyle">@message</p>
    <FluentButton Appearance="Appearance.Accent" @onclick="ResetGame">
        Reset Game
    </FluentButton>
</div>

<!-- Customization Options -->
<div style="margin-top:20px; text-align:center;">
    <div style="margin-bottom:10px;">
        <label style="margin-right:10px;">
            Choose X Color: <input type="color" @bind="xColor" />
        </label>
        <label style="margin-right:10px;">
            Choose O Color: <input type="color" @bind="oColor" />
        </label>
    </div>
    <div style="margin-bottom:10px;">
        <label style="margin-right:10px;">
            Choose X Font:
            <select @bind="xFont">
                @foreach (var font in fonts)
                {
                    <option value="@font">@font</option>
                }
            </select>
        </label>
        <label>
            Choose O Font:
            <select @bind="oFont">
                @foreach (var font in fonts)
                {
                    <option value="@font">@font</option>
                }
            </select>
        </label>
    </div>
    <div style="margin-bottom:10px;">
        <label style="margin-right:10px;">
            Piece Font Size (px):
            <input type="number" min="10" max="100" @bind="PieceFontSize" />
        </label>
        <label>
            Cell Size (px):
            <input type="number" min="50" max="300" @bind="CellSize" />
        </label>
    </div>
</div>

@code {
    // Enum representing cell states.
    enum CellState
    {
        Empty = 0,
        X = 1,
        O = -1
    }

    // The 3x3 board.
    CellState[] board = new CellState[9];

    // Game status message.
    string message = "Your turn (X)";
    // Style for the status message.
    string messageStyle = "font-size:1.5em; color:black;";

    // Global error message.
    string errorMessage = "";

    // Bound properties for colors.
    string xColor = "#0000FF"; // Default blue for X.
    string oColor = "#FF0000"; // Default red for O.

    // Bound properties for fonts.
    string xFont = "Arial";
    string oFont = "Courier New";

    // Predefined list of fonts.
    List<string> fonts = new List<string> { "Arial", "Courier New", "Times New Roman", "Georgia", "Verdana" };

    // Backing fields for piece font size and cell size.
    private int _pieceFontSize = 32;
    private int _cellSize = 100;

    // Maximum limits.
    const int MaxPieceFontSize = 100;
    const int MaxCellSize = 300;

    // Bound property for piece font size with validation.
    int PieceFontSize
    {
        get => _pieceFontSize;
        set
        {
            if (value > MaxPieceFontSize)
            {
                errorMessage = $"Piece font size is too big. Maximum is {MaxPieceFontSize} px.";
                _pieceFontSize = MaxPieceFontSize;
            }
            else
            {
                _pieceFontSize = value;
                if (errorMessage.Contains("Piece font size"))
                    errorMessage = "";
            }
            StateHasChanged();
        }
    }

    // Bound property for cell size with validation.
    int CellSize
    {
        get => _cellSize;
        set
        {
            if (value > MaxCellSize)
            {
                errorMessage = $"Cell size is too big. Maximum is {MaxCellSize} px.";
                _cellSize = MaxCellSize;
            }
            else
            {
                _cellSize = value;
                if (errorMessage.Contains("Cell size"))
                    errorMessage = "";
            }
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        ResetBoard();
    }

    void ResetBoard()
    {
        for (int i = 0; i < board.Length; i++)
        {
            board[i] = CellState.Empty;
        }
        message = "Your turn (X)";
        messageStyle = "font-size:1.5em; color:black;";
        errorMessage = "";
    }

    // Renders a cell's content with chosen color, font, and font size; centers the piece.
    MarkupString DisplayCell(CellState state)
    {
        return state switch
        {
            CellState.X => new MarkupString(
                $"<div style='display:flex; align-items:center; justify-content:center; width:100%; height:100%;'>" +
                $"<span style='color:{xColor}; font-family:{xFont}; font-size:{PieceFontSize}px;'>X</span></div>"),
            CellState.O => new MarkupString(
                $"<div style='display:flex; align-items:center; justify-content:center; width:100%; height:100%;'>" +
                $"<span style='color:{oColor}; font-family:{oFont}; font-size:{PieceFontSize}px;'>O</span></div>"),
            _ => new MarkupString(
                $"<div style='display:flex; align-items:center; justify-content:center; width:100%; height:100%;'></div>")
        };
    }

    // Determines the current player (human always plays X). Returns null if board is full.
    CellState? GetCurrentPlayer()
    {
        int countX = board.Count(x => x == CellState.X);
        int countO = board.Count(x => x == CellState.O);
        if (countX + countO == board.Length)
            return null;
        return (countX > countO) ? CellState.O : CellState.X;
    }

    // Marks a cell after being clicked
    async Task PlayerMove(int index)
    {
        if (board[index] != CellState.Empty || Terminal(board) != null)
            return;

        if (GetCurrentPlayer() != CellState.X)
            return;

        board[index] = CellState.X;
        StateHasChanged();
        await Task.Delay(200);

        CheckGameStatus();
        if (Terminal(board) != null)
            return;

        var bestMove = Minimax(board);
        board[bestMove.move.index] = bestMove.move.player;
        StateHasChanged();

        CheckGameStatus();
    }

    // Evaluates the board: returns 1 if X wins, -1 if O wins, 0 if tie, else null.
    int? Terminal(CellState[] b)
    {
        // Check rows.
        for (int i = 0; i < 3; i++)
        {
            var a = b[3 * i];
            var c = b[3 * i + 1];
            var d = b[3 * i + 2];
            if (a != CellState.Empty && a == c && c == d)
                return a == CellState.X ? 1 : -1;
        }
        // Check columns.
        for (int i = 0; i < 3; i++)
        {
            var a = b[i];
            var c = b[i + 3];
            var d = b[i + 6];
            if (a != CellState.Empty && a == c && c == d)
                return a == CellState.X ? 1 : -1;
        }
        // Check diagonals.
        if (b[0] != CellState.Empty && b[0] == b[4] && b[4] == b[8])
            return b[0] == CellState.X ? 1 : -1;
        if (b[2] != CellState.Empty && b[2] == b[4] && b[4] == b[6])
            return b[2] == CellState.X ? 1 : -1;

        if (b.All(x => x != CellState.Empty))
            return 0;

        return null;
    }

    // Updates the game status message and adjusts styling if finished.
    void CheckGameStatus()
    {
        var term = Terminal(board);
        if (term.HasValue)
        {
            if (term.Value == 1)
            {
                message = "You have won!";
                messageStyle = "font-size:2em; color:green; font-weight:bold; " +
                               "text-shadow: -1px -1px 0 black, 1px -1px 0 black, " +
                               "-1px 1px 0 black, 1px 1px 0 black, 2px 2px 2px rgba(0,0,0,0.5);";
            }
            else if (term.Value == -1)
            {
                message = "You have lost!";
                messageStyle = "font-size:2em; color:red; font-weight:bold; " +
                               "text-shadow: -1px -1px 0 black, 1px -1px 0 black, " +
                               "-1px 1px 0 black, 1px 1px 0 black, 2px 2px 2px rgba(0,0,0,0.5);";
            }
            else
            {
                message = "It's a tie.";
                messageStyle = "font-size:2em; color:yellow; font-weight:bold; " +
                               "text-shadow: -1px -1px 0 black, 1px -1px 0 black, " +
                               "-1px 1px 0 black, 1px 1px 0 black, 2px 2px 2px rgba(0,0,0,0.5);";
            }
        }
        else
        {
            message = GetCurrentPlayer() == CellState.X ? "Your turn (X)" : "Computer's turn (O)";
            messageStyle = "font-size:1.5em; color:black;";
        }
    }

    void ResetGame()
    {
        ResetBoard();
        StateHasChanged();
    }

    // Returns available moves as (player, index) tuples.
    List<(CellState player, int index)> Actions(CellState[] b)
    {
        var moves = new List<(CellState player, int index)>();
        var current = GetPlayerFor(b);
        if (current == null)
            return moves;
        for (int i = 0; i < b.Length; i++)
        {
            if (b[i] == CellState.Empty)
                moves.Add((current.Value, i));
        }
        return moves;
    }

    // Determines which player should move for the given board.
    CellState? GetPlayerFor(CellState[] b)
    {
        int countX = b.Count(x => x == CellState.X);
        int countO = b.Count(x => x == CellState.O);
        if (countX + countO == b.Length)
            return null;
        return (countX > countO) ? CellState.O : CellState.X;
    }

    // Recursive minimax utility function returning (score, cost).
    (int score, int cost) Utility(CellState[] b, int cost)
    {
        var term = Terminal(b);
        if (term.HasValue)
            return (term.Value, cost);

        var moves = Actions(b);
        var results = new List<(int score, int cost)>();
        foreach (var m in moves)
        {
            var newBoard = b.ToArray();
            newBoard[m.index] = m.player;
            results.Add(Utility(newBoard, cost + 1));
        }

        var current = GetPlayerFor(b);
        var best = results[0];
        if (current == CellState.X)
        {
            // Maximizing.
            foreach (var r in results)
            {
                if (r.score > best.score || (r.score == best.score && r.cost < best.cost))
                {
                    best = r;
                }
            }
        }
        else
        {
            // Minimizing.
            foreach (var r in results)
            {
                if (r.score < best.score || (r.score == best.score && r.cost < best.cost))
                {
                    best = r;
                }
            }
        }
        return best;
    }

    // Uses minimax to choose the best move.
    ((CellState player, int index) move, (int score, int cost) util) Minimax(CellState[] b)
    {
        var moves = Actions(b);
        if (moves.Count == 0)
            return ((CellState.Empty, 0), (0, 0));

        var results = new List<((CellState player, int index) move, (int score, int cost) util)>();
        foreach (var m in moves)
        {
            var newBoard = b.ToArray();
            newBoard[m.index] = m.player;
            var u = Utility(newBoard, 1);
            results.Add((m, u));
        }

        results.Sort((a, b) => a.move.index.CompareTo(b.move.index));
        var best = results[0];
        var current = GetPlayerFor(b);
        if (current == CellState.O)
        {
            // Minimizing.
            foreach (var candidate in results)
            {
                if (candidate.util.score < best.util.score ||
                    (candidate.util.score == best.util.score && candidate.util.cost < best.util.cost))
                {
                    best = candidate;
                }
            }
        }
        else
        {
            // Maximizing.
            foreach (var candidate in results)
            {
                if (candidate.util.score > best.util.score ||
                    (candidate.util.score == best.util.score && candidate.util.cost < best.util.cost))
                {
                    best = candidate;
                }
            }
        }
        return best;
    }
}
